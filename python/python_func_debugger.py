#!/usr/bin/python3
import os
import sys
from os import walk

def discover_method(line):
    """ This function discovers if current line defines a method
        :param line: line of code
    """
    subline = line.strip()
    method_name = None
    full_definition = False
    aligment_level = 0
    if(subline.startswith("def ")):
        # need to kow the deep level of method, to append print at same level
        aligment_level = line.index("def ")
        # get method name after  "def "
        subline_method = str.strip(subline[4:])
        method_name = subline_method[:subline_method.index("(")]
        # find if the method definition ends in this line
        if(subline.endswith(":")):
            full_definition = True
        
    return method_name, full_definition, aligment_level, find_method_end(line)

def find_method_end(line):
    """ Find if this 'line' ends a definition of method
        :param line: line of code
    """
    subline = line.strip()
    if(subline.endswith(":")):
        return True
    else:
        return False

def build_content_file(file_content, file_path):
    """ Generate new content with print included
        :param file_content: content of current script
        :param file_path: path to file to append to print debug line
    """
    new_file_content = ''
    for line in file_content:
        open_method = False
        new_file_content = "%s%s" % (new_file_content, line )
        if(open_method):
            open_method = not find_method_end(line)
        else:
            method_name, full_description, aligment_level, open_method = discover_method(line)
            open_method = not(open_method)
            if(method_name):
                aligment = " " * (aligment_level + 4)
                print_line = "%sprint(\"%s: %s\")" % (aligment, file_path, method_name)
                new_file_content = "%s%s\n" % (new_file_content, print_line, )

    return new_file_content

def create_new_file(filepath):
    """ Create new file from the content generated by build_new_file
        :param filepath: file to read
    """
    new_content = ''
    with open(filepath) as py_file:
        content = py_file.readlines()
        new_content = build_content_file(content, filepath)

    with open(filepath, "w") as py_file:
        py_file.write(new_content)

def create_debug_files(directory):
    """ Iterate through all files of given directory and trigger 
        the creation of new content
        :param directory: to iterate through
    """
    python_files = []
    directory = sys.argv[1]
    # iterate through all files of 
    for dir, dirs, files in os.walk(directory):
        for file in files:
            if(file.endswith(".py")):
                 file_path =  "%s/%s" % (dir, file)
                 create_new_file(file_path)


if(__name__ == "__main__"):
    filepath = "/tmp/dump.py"
    # validate required directory argument
    if(len(sys.argv) < 2):
        print("Missing required param: <directory>")
        os._exit(1)

    directory = sys.argv[1] 
    create_debug_files(directory)
